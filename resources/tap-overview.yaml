#@ load("@ytt:data", "data")
---
apiVersion: learningcenter.tanzu.vmware.com/v1beta1
kind: Workshop
metadata:
  name: tap-overview
spec:
  title: TAP Overview
  description: An introduction to the Tanzu Application Platform
  vendor: terasky.com
  difficulty: beginner
  duration: 60m
  url: https://github.com/vrabbi/tap-workshop
  content:
    image: #@ "harbor.{}/tanzu-e2e/eduk8s-tap-workshop:latest".format(data.values.ingress.domain)
    files: #@ "github.com/{}/tap-workshop?ref={}".format(data.values.git.account,data.values.git.branch)
  session:
    resources:
      memory: 3Gi
    env:
      - name: GITEA_PASSWORD
        value: #@ data.values.gitea.adminPassword
      - name: HARBOR_PASSWORD
        value: #@ data.values.harbor.adminPassword
    namespaces:
      budget: custom
    applications:
      terminal:
        enabled: true
        layout: split
      console:
        enabled: true
        vendor: octant
      editor:
        enabled: true
    objects:
    - apiVersion: v1
      kind: LimitRange
      metadata:
        name: resource-limits
      spec:
        limits:
        - max:
            storage: 10Gi
          type: PersistentVolumeClaim
    - apiVersion: e2e.tanzu.vmware.com/v1beta1
      kind: HarborProject
      metadata:
        annotations:
          learningcenter.tanzu.vmware.com/objects.crd.scope: Namespaced
        name: $(session_namespace)
      spec:
        name: $(session_namespace)
    - apiVersion: v1
      data:
        .dockerconfigjson: e30K
      kind: Secret
      metadata:
        annotations:
          secretgen.carvel.dev/image-pull-secret: ""
        name: tap-registry
      type: kubernetes.io/dockerconfigjson
    - apiVersion: v1
      data:
        .dockerconfigjson: e30K
      kind: Secret
      metadata:
        annotations:
          secretgen.carvel.dev/image-pull-secret: ""
        name: regcred
      type: kubernetes.io/dockerconfigjson
    - apiVersion: v1
      imagePullSecrets:
      - name: registry-credentials
      - name: tap-registry
      kind: ServiceAccount
      metadata:
        name: tap-sa
      secrets:
      - name: registry-credentials
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        annotations:
          kapp.k14s.io/change-group: role
        name: $(session_namespace)-kapp-permissions
      rules:
      - apiGroups:
        - servicebinding.io
        resources:
        - servicebindings
        verbs:
        - '*'
      - apiGroups:
        - services.tanzu.vmware.com
        resources:
        - resourceclaims
        verbs:
        - '*'
      - apiGroups:
        - serving.knative.dev
        resources:
        - services
        verbs:
        - '*'
      - apiGroups:
        - ""
        resources:
        - configmaps
        verbs:
        - get
        - watch
        - list
        - create
        - update
        - patch
        - delete
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        annotations:
          kapp.k14s.io/change-rule: upsert after upserting role
        name: $(session_namespace)-kapp-permissions
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: $(session_namespace)-kapp-permissions
      subjects:
      - kind: ServiceAccount
        name: tap-sa
        namespace: $(session_namespace)
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: $(session_namespace)-binding
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
      - kind: ServiceAccount
        name: $(service_account)
        namespace: $(workshop_namespace)
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: service-account-role
        namespace: $(session_namespace)
      rules:
      - apiGroups:
        - '*'
        resources:
        - '*'
        verbs:
        - '*'
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        annotations:
          kapp.k14s.io/change-rule: upsert after upserting role
        name: $(session_namespace)-service-account-role
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: service-account-role
      subjects:
      - kind: ServiceAccount
        name: default
        namespace: $(session_namespace)
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: app-live-view-connector-service-account
        namespace: $(session_namespace)
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: $(session_namespace)-app-live-view-connector-role
      rules:
      - apiGroups:
        - '*'
        resources:
        - pods
        verbs:
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: $(session_namespace)-app-live-view-connector-role-binding
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: $(session_namespace)-app-live-view-connector-role
      subjects:
      - kind: ServiceAccount
        name: app-live-view-connector-service-account
        namespace: $(session_namespace)
    - apiVersion: tekton.dev/v1beta1
      kind: Pipeline
      metadata:
        name: developer-defined-tekton-pipeline
        labels:
          apps.tanzu.vmware.com/pipeline: test
      spec:
        params:
          - name: source-url
          - name: source-revision
        tasks:
          - name: test
            params:
              - name: source-url
                value: $(params.source-url)
              - name: source-revision
                value: $(params.source-revision)
            taskSpec:
              params:
                - name: source-url
                - name: source-revision
              steps:
                - name: test
                  image: harbor.eks.vrabbi.cloud/library/gradle
                  script: |-
                    cd `mktemp -d`
                    wget -qO- $(params.source-url) | tar xvz
                    chmod +x ./mvnw
                    ./mvnw test
    - apiVersion: scanning.apps.tanzu.vmware.com/v1beta1
      kind: ScanTemplate
      metadata:
        name: blob-source-scan-template
      spec:
        template:
          containers:
          - args:
            - "-c"
            - "./source/scan-source.sh /workspace/source scan.xml"
            command:
            - "/bin/bash"
            image: registry.tanzu.vmware.com/tanzu-application-platform/tap-packages@sha256:2a2129c00e33815145bc7ac486a3716cb852a7c0dc555bc919f4a478be111c61
            imagePullPolicy: IfNotPresent
            name: scanner
            resources:
              limits:
                cpu: 1000m
              requests:
                cpu: 250m
                memory: 128Mi
            volumeMounts:
            - mountPath: "/workspace"
              name: workspace
              readOnly: false
          imagePullSecrets:
          - name: scanner-secret-ref
          initContainers:
          - args:
            - "-c"
            - "./source/untar-gitrepository.sh $REPOSITORY /workspace"
            command:
            - "/bin/bash"
            image: registry.tanzu.vmware.com/tanzu-application-platform/tap-packages@sha256:2a2129c00e33815145bc7ac486a3716cb852a7c0dc555bc919f4a478be111c61
            imagePullPolicy: IfNotPresent
            name: repo
            volumeMounts:
            - mountPath: "/workspace"
              name: workspace
              readOnly: false
          restartPolicy: Never
          securityContext:
            runAsNonRoot: true
          volumes:
          - emptyDir: {}
            name: workspace
    - apiVersion: scanning.apps.tanzu.vmware.com/v1beta1
      kind: ScanTemplate
      metadata:
        name: private-image-scan-template
      spec:
        template:
          containers:
          - args:
            - "-c"
            - "./image/copy-docker-config.sh /secret-data && ./image/scan-image.sh /workspace
              scan.xml true"
            command:
            - "/bin/bash"
            image: registry.tanzu.vmware.com/tanzu-application-platform/tap-packages@sha256:2a2129c00e33815145bc7ac486a3716cb852a7c0dc555bc919f4a478be111c61
            imagePullPolicy: IfNotPresent
            name: scanner
            resources:
              limits:
                cpu: 1000m
              requests:
                cpu: 250m
                memory: 128Mi
            volumeMounts:
            - mountPath: "/.docker"
              name: docker
              readOnly: false
            - mountPath: "/workspace"
              name: workspace
              readOnly: false
            - mountPath: "/secret-data"
              name: registry-cred
              readOnly: true
          imagePullSecrets:
          - name: scanner-secret-ref
          restartPolicy: Never
          securityContext:
            runAsNonRoot: true
          volumes:
          - emptyDir: {}
            name: docker
          - emptyDir: {}
            name: workspace
          - name: registry-cred
            secret:
              secretName: regcred
    - apiVersion: scanning.apps.tanzu.vmware.com/v1beta1
      kind: ScanTemplate
      metadata:
        name: private-source-scan-template
      spec:
        template:
          containers:
          - args:
            - "-c"
            - "./source/scan-source.sh /workspace/source scan.xml"
            command:
            - "/bin/bash"
            image: registry.tanzu.vmware.com/tanzu-application-platform/tap-packages@sha256:2a2129c00e33815145bc7ac486a3716cb852a7c0dc555bc919f4a478be111c61
            imagePullPolicy: IfNotPresent
            name: scanner
            resources:
              limits:
                cpu: 1000m
              requests:
                cpu: 250m
                memory: 128Mi
            volumeMounts:
            - mountPath: "/workspace"
              name: workspace
              readOnly: false
          imagePullSecrets:
          - name: scanner-secret-ref
          initContainers:
          - args:
            - "-c"
            - |
              export GIT_SSH_COMMAND=$(./source/set-git-credentials.sh /workspace/known_hosts /.ssh/ssh-privatekey)
              URL=git@${REPOSITORY}
              ./source/clone-repo.sh /workspace/source $URL
            command:
            - "/bin/bash"
            image: registry.tanzu.vmware.com/tanzu-application-platform/tap-packages@sha256:2a2129c00e33815145bc7ac486a3716cb852a7c0dc555bc919f4a478be111c61
            imagePullPolicy: IfNotPresent
            name: repo
            volumeMounts:
            - mountPath: "/workspace"
              name: workspace
              readOnly: false
            - mountPath: "/.ssh"
              name: ssh-secret
              readOnly: true
          restartPolicy: Never
          securityContext:
            runAsNonRoot: true
          volumes:
          - emptyDir: {}
            name: workspace
          - name: ssh-secret
            secret: {}
    - apiVersion: scanning.apps.tanzu.vmware.com/v1beta1
      kind: ScanTemplate
      metadata:
        name: public-image-scan-template
      spec:
        template:
          containers:
          - args:
            - "-c"
            - "./image/scan-image.sh /workspace scan.xml"
            command:
            - "/bin/bash"
            image: registry.tanzu.vmware.com/tanzu-application-platform/tap-packages@sha256:2a2129c00e33815145bc7ac486a3716cb852a7c0dc555bc919f4a478be111c61
            imagePullPolicy: IfNotPresent
            name: scanner
            resources:
              limits:
                cpu: 1000m
              requests:
                cpu: 250m
                memory: 128Mi
            volumeMounts:
            - mountPath: "/workspace"
              name: workspace
              readOnly: false
          imagePullSecrets:
          - name: scanner-secret-ref
          restartPolicy: Never
          securityContext:
            runAsNonRoot: true
          volumes:
          - emptyDir: {}
            name: workspace
    - apiVersion: scanning.apps.tanzu.vmware.com/v1beta1
      kind: ScanTemplate
      metadata:
        name: public-source-scan-template
      spec:
        template:
          containers:
          - args:
            - "-c"
            - "./source/scan-source.sh /workspace/source scan.xml"
            command:
            - "/bin/bash"
            image: registry.tanzu.vmware.com/tanzu-application-platform/tap-packages@sha256:2a2129c00e33815145bc7ac486a3716cb852a7c0dc555bc919f4a478be111c61
            imagePullPolicy: IfNotPresent
            name: scanner
            resources:
              limits:
                cpu: 1000m
              requests:
                cpu: 250m
                memory: 128Mi
            volumeMounts:
            - mountPath: "/workspace"
              name: workspace
              readOnly: false
          imagePullSecrets:
          - name: scanner-secret-ref
          initContainers:
          - args:
            - "-c"
            - "./source/clone-repo.sh /workspace/source $REPOSITORY"
            command:
            - "/bin/bash"
            image: registry.tanzu.vmware.com/tanzu-application-platform/tap-packages@sha256:2a2129c00e33815145bc7ac486a3716cb852a7c0dc555bc919f4a478be111c61
            imagePullPolicy: IfNotPresent
            name: repo
            volumeMounts:
            - mountPath: "/workspace"
              name: workspace
              readOnly: false
          restartPolicy: Never
          securityContext:
            runAsNonRoot: true
          volumes:
          - emptyDir: {}
            name: workspace
    - apiVersion: scanning.apps.tanzu.vmware.com/v1beta1
      kind: ScanPolicy
      metadata:
        name: scan-policy
      spec:
        regoFile: |
          package policies
          default isCompliant = false
          # Accepted Values: "Critical", "High", "Medium", "Low", "Negligible", "UnknownSeverity"
          violatingSeverities := ["Critical","UnknownSeverity"]
          ignoreCVEs := []
          contains(array, elem) = true {
            array[_] = elem
          } else = false { true }
          isSafe(match) {
            fails := contains(violatingSeverities, match.Ratings.Rating[_].Severity)
            not fails
          }
          isSafe(match) {
            ignore := contains(ignoreCVEs, match.Id)
            ignore
          }
          isCompliant = isSafe(input.currentVulnerability)
    - apiVersion: apps/v1
      kind: Deployment
      metadata:
        labels:
          app: application-live-view-connector
        name: application-live-view-connector
        namespace: $(session_namespace)
      spec:
        selector:
          matchLabels:
            name: application-live-view-connector
        template:
          metadata:
            labels:
              name: application-live-view-connector
          spec:
            containers:
            - env:
              - name: app.live.view.client.host
                value: application-live-view-7000.app-live-view.svc.cluster.local
              - name: NODE_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: spec.nodeName
              - name: NAMESPACE_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
              - name: app.live.view.connector.mode
                value: namespace-scoped
              image: harbor.tap.amer.end2end.link/app-live-view/connector
              imagePullPolicy: IfNotPresent
              livenessProbe:
                httpGet:
                  path: /health
                  port: 8787
                initialDelaySeconds: 15
                periodSeconds: 5
                timeoutSeconds: 3
              name: application-live-view-connector
              resources:
                limits:
                  cpu: 250m
                  memory: 120Mi
                requests:
                  cpu: 150m
                  memory: 70Mi
            serviceAccountName: app-live-view-connector-service-account
